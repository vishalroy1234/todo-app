{"version":3,"sources":["Todo.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todos","deleteTodo","todoList","length","map","todo","className","key","id","content","onClick","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","name","React","Component","App","Math","random","tudu","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNAqBeA,EAnBJ,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,WACTC,EAAUF,EAAMG,OAClBH,EAAMI,KAAI,SAAAC,GACV,OAAO,yBAAKC,UAAU,YAAYC,IAAKF,EAAKG,IAChC,wBAAKF,UAAU,oBAAoBD,EAAKI,SACxC,4BAAQH,UAAU,+BAA+BI,QAAS,WAAKT,EAAWI,KAA1E,eACA,iCAIZ,8DAEJ,OACI,6BACKH,ICiBES,E,4MA9BXC,MAAM,CACFH,QAAQ,I,EAEZI,aAAa,SAACC,GACV,EAAKC,SAAS,CACVN,QAAQK,EAAEE,OAAOC,S,EAGzBC,aAAa,SAACJ,GACVA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACVN,QAAQ,M,uDAIZ,OACI,6BACI,0BAAMa,SAAUC,KAAKL,cACjB,2CACA,2BAAOM,KAAK,OAAOC,SAAUF,KAAKV,aAAcI,MAAOM,KAAKX,MAAMH,UAClE,4BAAQH,UAAU,+BAA+BkB,KAAK,SAASE,KAAK,UAApE,SACA,uBAAGpB,UAAU,wBAAb,e,GAvBEqB,IAAMC,WCiCbC,E,4MA9BbjB,MAAM,CACJZ,MAAM,I,EAERqB,QAAQ,SAAChB,GACPA,EAAKG,GAAGsB,KAAKC,SACb,EAAKhB,SAAS,CACZf,MAAM,GAAD,mBAAK,EAAKY,MAAMZ,OAAhB,CAAsBK,O,EAG/BJ,WAAW,SAAC+B,GACV,EAAKjB,SAAS,CACZf,MAAM,EAAKY,MAAMZ,MAAMiC,QAAO,SAAA5B,GAC5B,OAAOA,IAAO2B,Q,uDAKlB,OACA,yBAAK1B,UAAU,WACb,wBAAIA,UAAU,gBAAd,YACA,6BACA,kBAAC,EAAD,CAAMN,MAAOuB,KAAKX,MAAMZ,MAAOC,WAAYsB,KAAKtB,aAChD,kBAAC,EAAD,CAASoB,QAASE,KAAKF,e,GAvBXM,IAAMC,WCQJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.aea9416e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Todo=({todos,deleteTodo})=>{\n    const todoList=(todos.length)?(\n        todos.map(todo=>{\n        return(<div className=\"container\" key={todo.id}>\n                    <h3  className=\"indigo lighten-3\">{todo.content}</h3>\n                    <button className=\"waves-effect waves-light btn\" onClick={()=>{deleteTodo(todo)}}>Delete Todo</button>\n                    <hr/>\n               </div>)\n        })\n    ):(\n        <h3>U completed your today's tasks</h3>\n    );\n    return(\n        <div>\n            {todoList}\n        </div>\n        \n    );\n}\nexport default Todo;","import React from 'react';\n\nclass AddTodo extends React.Component{\n    state={\n        content:''\n    }\n    handleChange=(e)=>{\n        this.setState({\n            content:e.target.value\n        })\n    }\n    handleSubmit=(e)=>{\n        e.preventDefault();\n        this.props.addTodo(this.state);\n        this.setState({\n            content:''\n        })\n    }\n    render(){\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <h4>Add ur todo</h4>\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.content}></input>\n                    <button className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Submit\n                    <i className=\"material-icons right\">send</i>\n                    </button>\n\n                </form>\n            </div>\n        );\n    }\n}\nexport default AddTodo;","import React from 'react';\nimport Todo from './Todo';\nimport AddTodo from './AddTodo';\n \nclass App extends React.Component {\n  state={\n    todos:[]\n  }\n  addTodo=(todo)=>{\n    todo.id=Math.random();\n    this.setState({\n      todos:[...this.state.todos,todo]\n    })\n  }\n  deleteTodo=(tudu)=>{\n    this.setState({\n      todos:this.state.todos.filter(todo=>{\n        return todo!==tudu\n      })\n    })\n  }\n  render(){\n    return(\n    <div className=\"TodoApp\">\n      <h1 className=\"center-align\">My Todos</h1>\n      <hr/>\n      <Todo todos={this.state.todos} deleteTodo={this.deleteTodo}/>\n      <AddTodo addTodo={this.addTodo}/>\n    </div>\n    );\n  }\n    \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}